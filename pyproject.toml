[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "conference-talk-classifier"
version = "1.0.0"
description = "A type-safe, modular classifier for analyzing conference talks on a grace-works theological spectrum"
authors = [
    {name = "Conference Talk Classifier Team", email = "dev@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
keywords = ["theology", "nlp", "classification", "openai", "streamlit"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Religion",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
    "Typing :: Typed",
]

dependencies = [
    "streamlit>=1.39.0",
    "openai>=1.51.2",
    "python-dotenv>=1.0.1",
    "pandas>=1.4.0,<3",
    "jinja2>=3.1.4",
    "lxml>=5.3.0",
    "altair>=5.4.1",
    "tqdm>=4.66.6",
]

[project.optional-dependencies]
dev = [
    "mypy>=1.11.2",
    "pytest>=8.3.2",
    "pytest-mock>=3.12.0",
    "black>=24.10.0",
    "isort>=5.13.2",
    "flake8>=7.1.1",
    "bandit>=1.7.10",
    "safety>=3.2.8",
    "pytest-benchmark>=4.0.0",
    "coverage>=7.6.7",
    "pre-commit>=3.8.0",
]

docs = [
    "sphinx>=7.4.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=2.2.0",
]

[project.urls]
Homepage = "https://github.com/example/conference-talk-classifier"
Repository = "https://github.com/example/conference-talk-classifier.git"
Documentation = "https://conference-talk-classifier.readthedocs.io/"
"Bug Tracker" = "https://github.com/example/conference-talk-classifier/issues"

[project.scripts]
classify-talks = "classifier_optimized:main"
classify-talks-basic = "classifier_refactored:main"

# Black Configuration
[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort Configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = [".", "processors", "utils", "tests"]
known_first_party = ["models", "processors", "utils"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# pytest Configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "benchmark: marks tests as performance benchmarks",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning:pkg_resources.*",
]

# Coverage Configuration  
[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
    "*/__pycache__/*",
    "*/htmlcov/*",
    "*/.pytest_cache/*",
    "*/.mypy_cache/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# MyPy Configuration
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "streamlit.*",
    "altair.*", 
    "tqdm.*",
    "jinja2.*",
    "openai.*",
    "pandas.*",
    "lxml.*",
    "beautifulsoup4.*",
]
ignore_missing_imports = true

# Bandit Configuration
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert and shell usage in tests

# Ruff Configuration (Alternative to flake8)
[tool.ruff]
line-length = 100
target-version = "py39"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "D",   # pydocstyle
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "S",   # flake8-bandit
    "T20", # flake8-print
]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in __init__
    "S101", # Use of assert detected
    "T201", # print found
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.per-file-ignores]
"tests/*" = ["D", "S"]  # Ignore docstring and security checks in tests
"*/__init__.py" = ["D104"] 