name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create required directories
      run: |
        mkdir -p conference_talks
        mkdir -p output
        mkdir -p templates

    - name: Create minimal template for tests
      run: |
        echo "{{ content }}" > templates/classify_prompt.jinja

    - name: Run type checking with mypy
      run: |
        mypy models.py processors/ utils/ --ignore-missing-imports

    - name: Run unit tests
      run: |
        python -m pytest tests/unit/ -v --tb=short

    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v --tb=short

    - name: Generate coverage report
      run: |
        pip install coverage
        coverage run -m pytest tests/
        coverage report -m
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  type-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mypy

    - name: Type check with mypy
      run: |
        mypy models.py processors/ utils/ --ignore-missing-imports

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8

    - name: Check code formatting with Black
      run: |
        black --check --diff models.py processors/ utils/ tests/

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff models.py processors/ utils/ tests/

    - name: Lint with flake8
      run: |
        flake8 models.py processors/ utils/ tests/ --max-line-length=100 --ignore=E203,W503

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run security analysis with bandit
      run: |
        bandit -r models.py processors/ utils/ -f json -o bandit-report.json || true

    - name: Check dependencies with safety
      run: |
        pip install -r requirements.txt
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  performance:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark

    - name: Create test environment
      run: |
        mkdir -p conference_talks output templates
        echo "{{ content }}" > templates/classify_prompt.jinja

    - name: Run performance benchmarks
      run: |
        python -m pytest tests/ -k "benchmark" --benchmark-only --benchmark-json=benchmark.json || true

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: benchmark-results
        path: benchmark.json

  build-docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install documentation tools
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme

    - name: Generate API documentation
      run: |
        sphinx-apidoc -o docs/source . --force
        sphinx-build -b html docs/source docs/build || true

    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/build/

  integration-test:
    runs-on: ubuntu-latest
    needs: [test, type-check]
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create test environment
      run: |
        mkdir -p conference_talks output templates
        echo "Test template {{ content }}" > templates/classify_prompt.jinja

    - name: Test CLI functionality
      run: |
        python classifier_refactored.py --help
        python classifier_optimized.py --help

    - name: Test configuration validation
      run: |
        python -c "from models import ClassifierConfig; from pathlib import Path; config = ClassifierConfig(talks_dir=Path('conference_talks'), output_dir=Path('output'), templates_dir=Path('templates'), openai_api_key='test'); print('Configuration validation passed')"

  dependency-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install pip-audit
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit

    - name: Audit dependencies
      run: |
        pip install -r requirements.txt
        pip-audit --format=json --output=audit-report.json || true

    - name: Upload audit report
      uses: actions/upload-artifact@v3
      with:
        name: dependency-audit
        path: audit-report.json

  notify:
    runs-on: ubuntu-latest
    needs: [test, type-check, lint, security]
    if: always()
    steps:
    - name: Notify success
      if: ${{ needs.test.result == 'success' && needs.type-check.result == 'success' && needs.lint.result == 'success' }}
      run: |
        echo "✅ All checks passed! Ready for deployment."

    - name: Notify failure
      if: ${{ needs.test.result == 'failure' || needs.type-check.result == 'failure' || needs.lint.result == 'failure' }}
      run: |
        echo "❌ Some checks failed. Please review the logs."
        exit 1 